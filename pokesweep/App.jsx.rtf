{\rtf1\ansi\ansicpg1252\cocoartf2758
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useEffect, useMemo, useState \} from "react";\
import \{ motion \} from "framer-motion";\
import \{ AlertCircle, Bell, Plus, Search, TrendingUp, X \} from "lucide-react";\
\
// ---- Simple UI primitives (shadcn-lite) ----\
const Card = (\{ children \}) => (\
  <div className="rounded-2xl shadow-lg bg-white border p-4">\{children\}</div>\
);\
const Button = (\{ children, className = "", ...props \}) => (\
  <button\
    className=\{`rounded-2xl px-4 py-2 shadow hover:shadow-md transition border bg-white $\{className\}`\}\
    \{...props\}\
  >\
    \{children\}\
  </button>\
);\
const Input = (\{ className = "", ...props \}) => (\
  <input\
    className=\{`w-full rounded-xl border px-3 py-2 outline-none focus:ring-2 $\{className\}`\}\
    \{...props\}\
  />\
);\
const Tag = (\{ children \}) => (\
  <span className="text-xs rounded-full border px-2 py-1 bg-gray-50">\{children\}</span>\
);\
\
// ---- Helpers ----\
const load = (k, v) => \{\
  try \{\
    const raw = localStorage.getItem(k);\
    return raw ? JSON.parse(raw) : v;\
  \} catch \{\
    return v;\
  \}\
\};\
const save = (k, v) => localStorage.setItem(k, JSON.stringify(v));\
\
// ---- Types ----\
/** CardItem\
 * id: string\
 * name: string (e.g., "1999 Base Set Charizard Holo #4 - PSA 10")\
 * pop: number (PSA 10 population)\
 * price: number (current average market price)\
 * target: number (buyout budget threshold for the entire market of this card)\
 * source: string (where price came from)\
 */\
\
// ---- Mock seed data ----\
const seed = [\
  \{\
    id: "base-charizard-psa10",\
    name: "1999 Base Set Charizard Holo #4 \'96 PSA 10",\
    pop: 1200,\
    price: 150000,\
    target: 120000000, // budget if sweeping entire PSA10 market\
    source: "Manual",\
  \},\
  \{\
    id: "computer-error-16-psa10",\
    name: "Computer Error #16 (WotC Promo) \'96 PSA 10",\
    pop: 300,\
    price: 1800,\
    target: 450000, // example target cap\
    source: "Manual",\
  \},\
];\
\
export default function App() \{\
  const [items, setItems] = useState(() => load("ps-items", seed));\
  const [query, setQuery] = useState("");\
  const [showAdd, setShowAdd] = useState(false);\
  const [draft, setDraft] = useState(\{ name: "", pop: "", price: "", target: "", source: "Manual" \});\
\
  useEffect(() => save("ps-items", items), [items]);\
\
  const filtered = useMemo(() => \{\
    const q = query.trim().toLowerCase();\
    if (!q) return items;\
    return items.filter((i) => i.name.toLowerCase().includes(q));\
  \}, [items, query]);\
\
  const totals = useMemo(() => \{\
    const marketCap = items.reduce((s, i) => s + i.pop * i.price, 0);\
    const budget = items.reduce((s, i) => s + (Number(i.target) || 0), 0);\
    const upside = items.reduce((s, i) => s + i.price * 0.15 * i.pop, 0); // naive 15% upside placeholder\
    return \{ marketCap, budget, upside \};\
  \}, [items]);\
\
  const alerts = useMemo(() => \{\
    return items\
      .map((i) => (\{\
        id: i.id,\
        name: i.name,\
        currentCap: i.pop * i.price,\
        target: Number(i.target) || 0,\
        triggered: (Number(i.target) || 0) > 0 && i.pop * i.price <= Number(i.target),\
      \}))\
      .filter((a) => a.target > 0);\
  \}, [items]);\
\
  function addItem() \{\
    if (!draft.name) return;\
    const item = \{\
      id: `$\{Date.now()\}`,\
      name: draft.name,\
      pop: Number(draft.pop) || 0,\
      price: Number(draft.price) || 0,\
      target: Number(draft.target) || 0,\
      source: draft.source || "Manual",\
    \};\
    setItems((prev) => [item, ...prev]);\
    setDraft(\{ name: "", pop: "", price: "", target: "", source: "Manual" \});\
    setShowAdd(false);\
  \}\
\
  function removeItem(id) \{\
    setItems((prev) => prev.filter((i) => i.id !== id));\
  \}\
\
  function updateItem(id, patch) \{\
    setItems((prev) => prev.map((i) => (i.id === id ? \{ ...i, ...patch \} : i)));\
  \}\
\
  return (\
    <div className="min-h-screen bg-gray-50 text-gray-900">\
      <header className="sticky top-0 z-20 bg-white/80 backdrop-blur border-b">\
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center gap-3">\
          <TrendingUp className="w-6 h-6" />\
          <h1 className="text-xl font-bold">Pok\'e9Sweep \'96 PSA10 Market Planner</h1>\
          <div className="ml-auto flex items-center gap-2 w-full max-w-md">\
            <div className="relative w-full">\
              <Search className="w-4 h-4 absolute left-3 top-1/2 -translate-y-1/2" />\
              <Input\
                placeholder="Search cards..."\
                className="pl-9"\
                value=\{query\}\
                onChange=\{(e) => setQuery(e.target.value)\}\
              />\
            </div>\
            <Button onClick=\{() => setShowAdd(true)\} className="bg-black text-white">\
              <Plus className="w-4 h-4 mr-1" /> Add\
            </Button>\
          </div>\
        </div>\
      </header>\
\
      <main className="max-w-6xl mx-auto px-4 py-6 grid md:grid-cols-3 gap-4">\
        <motion.div initial=\{\{ opacity: 0, y: 6 \}\} animate=\{\{ opacity: 1, y: 0 \}\} className="md:col-span-2 space-y-4">\
          <Card>\
            <div className="flex items-center justify-between mb-3">\
              <h2 className="text-lg font-semibold">Your Cards</h2>\
              <Tag>\{filtered.length\} items</Tag>\
            </div>\
\
            <div className="space-y-3">\
              \{filtered.map((i) => (\
                <div key=\{i.id\} className="rounded-xl border p-3 bg-white/60">\
                  <div className="flex items-start gap-3">\
                    <div className="flex-1">\
                      <div className="flex items-center justify-between">\
                        <div>\
                          <div className="font-medium">\{i.name\}</div>\
                          <div className="text-xs text-gray-500">Source: \{i.source\}</div>\
                        </div>\
                        <button onClick=\{() => removeItem(i.id)\} className="text-gray-400 hover:text-red-500">\
                          <X className="w-4 h-4" />\
                        </button>\
                      </div>\
\
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mt-3">\
                        <div>\
                          <label className="text-xs text-gray-500">PSA 10 Pop</label>\
                          <Input\
                            type="number"\
                            value=\{i.pop\}\
                            onChange=\{(e) => updateItem(i.id, \{ pop: Number(e.target.value) \})\}\
                          />\
                        </div>\
                        <div>\
                          <label className="text-xs text-gray-500">Avg Price ($)</label>\
                          <Input\
                            type="number"\
                            value=\{i.price\}\
                            onChange=\{(e) => updateItem(i.id, \{ price: Number(e.target.value) \})\}\
                          />\
                        </div>\
                        <div>\
                          <label className="text-xs text-gray-500">Target Market Cap ($)</label>\
                          <Input\
                            type="number"\
                            value=\{i.target\}\
                            onChange=\{(e) => updateItem(i.id, \{ target: Number(e.target.value) \})\}\
                          />\
                        </div>\
                        <div className="flex items-end">\
                          <div className="text-sm">\
                            <div className="text-gray-500">Current Market Cap</div>\
                            <div className="font-semibold">$\{(i.pop * i.price).toLocaleString()\}</div>\
                          </div>\
                        </div>\
                      </div>\
                    </div>\
                  </div>\
                </div>\
              ))\}\
\
              \{filtered.length === 0 && (\
                <div className="text-sm text-gray-500">No matching cards. Try adding one.</div>\
              )\}\
            </div>\
          </Card>\
        </motion.div>\
\
        <motion.aside initial=\{\{ opacity: 0, y: 6 \}\} animate=\{\{ opacity: 1, y: 0 \}\} className="space-y-4">\
          <Card>\
            <h3 className="text-lg font-semibold mb-2">Portfolio Snapshot</h3>\
            <div className="space-y-2 text-sm">\
              <div className="flex justify-between"><span>Total Market Cap</span><span className="font-semibold">$\{totals.marketCap.toLocaleString()\}</span></div>\
              <div className="flex justify-between"><span>Your Budget Targets</span><span className="font-semibold">$\{totals.budget.toLocaleString()\}</span></div>\
              <div className="flex justify-between"><span>Theoretical Upside (15%)</span><span className="font-semibold">$\{totals.upside.toLocaleString()\}</span></div>\
            </div>\
          </Card>\
\
          <Card>\
            <div className="flex items-center gap-2 mb-2">\
              <Bell className="w-4 h-4" />\
              <h3 className="text-lg font-semibold">Alerts</h3>\
            </div>\
            <div className="space-y-2">\
              \{alerts.map((a) => (\
                <div key=\{a.id\} className=\{`rounded-xl border p-2 $\{a.triggered ? "bg-green-50 border-green-200" : "bg-gray-50"\}`\}>\
                  <div className="text-sm font-medium">\{a.name\}</div>\
                  <div className="text-xs text-gray-600">Current Cap: $\{a.currentCap.toLocaleString()\}</div>\
                  <div className="text-xs text-gray-600">Target: $\{a.target.toLocaleString()\}</div>\
                  \{a.triggered && (\
                    <div className="text-xs mt-1 font-semibold">\uc0\u9989  Sweep condition met</div>\
                  )\}\
                </div>\
              ))\}\
              \{alerts.length === 0 && (\
                <div className="text-xs text-gray-500">No targets set yet.</div>\
              )\}\
            </div>\
          </Card>\
\
          <Card>\
            <div className="flex items-start gap-2">\
              <AlertCircle className="w-4 h-4 mt-1" />\
              <div className="text-sm">\
                <div className="font-semibold mb-1">How to use</div>\
                <ol className="list-decimal ml-5 space-y-1">\
                  <li>Add a card and fill in PSA 10 population & current average price.</li>\
                  <li>Set a <span className="font-medium">Target Market Cap</span> (what you could spend to sweep).</li>\
                  <li>Watch alerts \'97 when Current \uc0\u8804  Target, your sweep condition triggers.</li>\
                </ol>\
              </div>\
            </div>\
          </Card>\
        </motion.aside>\
      </main>\
\
      \{showAdd && (\
        <div className="fixed inset-0 bg-black/20 backdrop-blur-sm flex items-center justify-center p-4">\
          <div className="bg-white rounded-2xl shadow-xl w-full max-w-lg border">\
            <div className="p-4 border-b flex items-center justify-between">\
              <div className="font-semibold">Add Card</div>\
              <button onClick=\{() => setShowAdd(false)\} className="text-gray-400 hover:text-black">\
                <X className="w-5 h-5" />\
              </button>\
            </div>\
            <div className="p-4 space-y-3">\
              <div>\
                <label className="text-xs text-gray-500">Card Name</label>\
                <Input value=\{draft.name\} onChange=\{(e) => setDraft(\{ ...draft, name: e.target.value \})\} />\
              </div>\
              <div className="grid grid-cols-2 gap-3">\
                <div>\
                  <label className="text-xs text-gray-500">PSA 10 Pop</label>\
                  <Input type="number" value=\{draft.pop\} onChange=\{(e) => setDraft(\{ ...draft, pop: e.target.value \})\} />\
                </div>\
                <div>\
                  <label className="text-xs text-gray-500">Avg Price ($)</label>\
                  <Input type="number" value=\{draft.price\} onChange=\{(e) => setDraft(\{ ...draft, price: e.target.value \})\} />\
                </div>\
              </div>\
              <div>\
                <label className="text-xs text-gray-500">Target Market Cap ($)</label>\
                <Input type="number" value=\{draft.target\} onChange=\{(e) => setDraft(\{ ...draft, target: e.target.value \})\} />\
              </div>\
              <div>\
                <label className="text-xs text-gray-500">Source</label>\
                <Input value=\{draft.source\} onChange=\{(e) => setDraft(\{ ...draft, source: e.target.value \})\} />\
              </div>\
            </div>\
            <div className="p-4 border-t flex justify-end gap-2">\
              <Button onClick=\{() => setShowAdd(false)\}>Cancel</Button>\
              <Button onClick=\{addItem\} className="bg-black text-white">Save</Button>\
            </div>\
          </div>\
        </div>\
      )\}\
\
      <footer className="text-center text-xs text-gray-500 py-6">\
        Built for collectors. Demo only \'97 not financial advice.\
      </footer>\
    </div>\
  );\
\}\
}